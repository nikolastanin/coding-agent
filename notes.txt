coding-agent-local is now the latest with latest prompt


pssible problems:

writeFiles instead of writeFile, or patch?
add to prompt - if its a minor change, dont ask for user to confirm
writeFile - should fail if projectId is not set.  
example:{
  "projectId": "",
  "path": "src/components/LeadGenFlow.tsx",
  "content": "import React, { useState } from \"react\";\n\n// SVG icons for house and flat\nconst HouseIcon = () => (\n  <svg width=\"28\" height=\"28\" fill=\"none\" viewBox=\"0 0 24 24\" className=\"text-primary-glow\">\n    <path d=\"M3 11.5L12 4l9 7.5V20a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-4h-4v4a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V11.5z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinejoin=\"round\"/>\n  </svg>\n);\nconst FlatIcon = () => (\n  <svg width=\"28\" height=\"28\" fill=\"none\" viewBox=\"0 0 24 24\" className=\"text-primary-glow\">\n    <rect x=\"3\" y=\"7\" width=\"18\" height=\"13\" rx=\"2\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n    <rect x=\"7\" y=\"11\" width=\"3\" height=\"3\" rx=\"0.5\" fill=\"currentColor\" opacity=\"0.5\"/>\n    <rect x=\"14\" y=\"11\" width=\"3\" height=\"3\" rx=\"0.5\" fill=\"currentColor\" opacity=\"0.5\"/>\n  </svg>\n);\n\nconst steps = [\n  {\n    label: \"What's your name?\",\n    name: \"name\",\n    type: \"text\",\n    placeholder: \"Enter your name\",\n    validate: (v: string) => v.trim().length > 1,\n    render: undefined,\n  },\n  {\n    label: \"What's your email?\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Enter your email\",\n    validate: (v: string) => /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(v),\n    render: undefined,\n  },\n  {\n    label: \"Your company name?\",\n    name: \"company\",\n    type: \"text\",\n    placeholder: \"Enter company name\",\n    validate: (v: string) => v.trim().length > 1,\n    render: undefined,\n  },\n  {\n    label: \"Your role?\",\n    name: \"role\",\n    type: \"text\",\n    placeholder: \"e.g. Founder, Designer\",\n    validate: (v: string) => v.trim().length > 1,\n    render: undefined,\n  },\n  {\n    label: \"What's your main goal?\",\n    name: \"goal\",\n    type: \"text\",\n    placeholder: \"e.g. Grow my business\",\n    validate: (v: string) => v.trim().length > 2,\n    render: undefined,\n  },\n  {\n    label: \"Type of renovation\",\n    name: \"renovationType\",\n    type: \"select\",\n    placeholder: \"Choose type\",\n    validate: (v: string) => v === \"house\" || v === \"flat\",\n    render: (value: string, onChange: (v: string) => void, touched: boolean) => (\n      <div className=\"flex flex-col gap-4 mt-4 mb-2 w-full\">\n        {[\n          { option: 'house', icon: <HouseIcon /> },\n          { option: 'flat', icon: <FlatIcon /> },\n        ].map(({ option, icon }) => (\n          <label\n            key={option}\n            className={`w-full cursor-pointer flex items-center gap-4 px-5 py-4 rounded-xl neon-checkbox-label transition-all duration-200 border-2\n              ${value === option ? 'bg-primary/10 border-primary shadow-[0_0_16px_hsl(var(--primary-glow))]' : 'bg-background border-border'}\n            `}\n            style={{ minHeight: 64, width: '100%', display: 'flex', flexDirection: 'row' }}\n          >\n            <input\n              type=\"checkbox\"\n              checked={value === option}\n              onChange={() => onChange(option)}\n              className=\"neon-checkbox hidden\"\n            />\n            <span className=\"flex-shrink-0\">{icon}</span>\n            <span className=\"capitalize text-lg font-semibold tracking-wide text-foreground\">\n              {option}\n            </span>\n          </label>\n        ))}\n      </div>\n    ),\n  },\n];\n\ntype FormState = {\n  name: string;\n  email: string;\n  company: string;\n  role: string;\n  goal: string;\n  renovationType: string;\n};\n\nconst initialState: FormState = {\n  name: \"\",\n  email: \"\",\n  company: \"\",\n  role: \"\",\n  goal: \"\",\n  renovationType: \"\",\n};\n\nexport default function LeadGenFlow() {\n  const [step, setStep] = useState(0);\n  const [form, setForm] = useState<FormState>(initialState);\n  const [touched, setTouched] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const current = steps[step];\n  const value = form[current.name as keyof FormState];\n  const valid = current.validate(value);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement> | string) {\n    if (typeof e === 'string') {\n      setForm({ ...form, [current.name]: e });\n      setTouched(true);\n    } else {\n      setForm({ ...form, [current.name]: e.target.value });\n      setTouched(true);\n    }\n  }\n\n  function handleNext(e: React.FormEvent) {\n    e.preventDefault();\n    if (!valid) return;\n    if (step < steps.length - 1) {\n      setStep(step + 1);\n      setTouched(false);\n    } else {\n      setSubmitted(true);\n    }\n  }\n\n  function handleBack() {\n    if (step > 0) {\n      setStep(step - 1);\n      setTouched(false);\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen\">\n      <div className=\"neon-logo\">nikola.com</div>\n      <div className=\"neon-card w-full max-w-md\">\n        {/* Header added here */}\n        <div className=\"w-full text-center mb-4\">\n          <h2 className=\"text-2xl font-extrabold tracking-tight text-primary-glow\" style={{textShadow: '0 0 12px hsl(var(--primary-glow))'}}>testheader</h2>\n        </div>\n        <div className=\"neon-progress\">\n          <div\n            className=\"neon-progress-bar\"\n            style={{ width: `${((step + (submitted ? 1 : 0)) / steps.length) * 100}%` }}\n          />\n        </div>\n        {submitted ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-3xl font-bold mb-2\" style={{ color: \"hsl(var(--primary))\", textShadow: \"0 0 16px hsl(var(--primary-glow))\" }}>\n              Thank you!\n            </div>\n            <div className=\"text-lg opacity-80\">We'll be in touch soon.</div>\n          </div>\n        ) : (\n          <form onSubmit={handleNext}>\n            <label className=\"block text-xl font-bold mb-4\" htmlFor={current.name}>\n              {current.label}\n            </label>\n            {current.render ? (\n              current.render(value, (v: string) => handleChange(v), touched)\n            ) : (\n              <input\n                className=\"neon-input mb-2\"\n                id={current.name}\n                name={current.name}\n                type={current.type}\n                placeholder={current.placeholder}\n                value={value}\n                onChange={handleChange}\n                autoFocus\n                autoComplete=\"off\"\n              />\n            )}\n            {touched && !valid && (\n              <div className=\"text-danger-glow text-sm mb-2\" style={{ color: \"hsl(var(--danger))\", textShadow: \"0 0 8px hsl(var(--danger-glow))\" }}>\n                Please enter a valid value.\n              </div>\n            )}\n            <div className=\"flex justify-between mt-6\">\n              <button\n                type=\"button\"\n                className=\"neon-btn px-6 py-2\"\n                style={{ background: \"rgba(0,0,0,0.3)\", boxShadow: \"none\", color: \"hsl(var(--accent))\", border: \"2px solid hsl(var(--accent))\" }}\n                onClick={handleBack}\n                disabled={step === 0}\n              >\n                Back\n              </button>\n              <button\n                type=\"submit\"\n                className=\"neon-btn px-6 py-2\"\n                disabled={!valid}\n              >\n                {step === steps.length - 1 ? \"Finish\" : \"Next\"}\n              </button>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n"
}
you can see here ^^^ the project Id is not set. so agent writes to wrong dir.


to add :

context: you are using this boilerplate or theme
when reusing forms, paste tailwind.css so we can be consistent across projects
